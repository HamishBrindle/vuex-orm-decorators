import { Model } from '@vuex-orm/core';
import { ORMDatabase } from './database';

/**
 * Creates an vuex-orm Model
 * @param entityName The name of the entity to be used as the key for the state
 */
export function OrmModel(entityName: string, parentEntity?: string, types?: { [key: string]: Model }, typeKey?: string) {
    return function <Model extends Function>(constructor: Model): Model | void {
        const model: Function = constructor;

        // Set the entity name on the model constructor
        (constructor as any).entity = entityName;

        // Set the parent entity name on the model constructo (if present)
        if (parentEntity) { (constructor as any).baseEntity = parentEntity; }

        // Seup the types and descriminator (if set)
        (constructor as any).types = types;
        if (types && typeKey) { (constructor as any).typeKey = typeKey; }

        // Add the fields generated by tha attribute decorators
        (constructor as any).fields = () => (constructor as any)._fields || {};

        // Register the entity in the database
        ORMDatabase.registerEntity(constructor as unknown as typeof Model);

        return constructor;
    };
}